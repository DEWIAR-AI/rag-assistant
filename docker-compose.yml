version: '3.8'

services:
  app:
    build: .
    ports:
      - "${EXTERNAL_PORT:-8000}:8000"
    environment:
      # Основные настройки
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEMO_MODE=${DEMO_MODE:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      
      # База данных
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_HOST=${DATABASE_HOST:-localhost}
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_NAME=${DATABASE_NAME:-rag_database}
      - DATABASE_USER=${DATABASE_USER:-rag_user}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      
      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_BUCKET=${SUPABASE_BUCKET:-rag-files}
      
      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-2000}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.7}
      
      # Embedding
      - EMBEDDING_PROVIDER=${EMBEDDING_PROVIDER:-openai}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - EMBEDDING_OPENAI_MODEL=${EMBEDDING_OPENAI_MODEL:-text-embedding-3-small}
      
      # Qdrant
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - QDRANT_COLLECTION_NAME=${QDRANT_COLLECTION_NAME:-restaurant_documents}
      - QDRANT_VECTOR_SIZE=${QDRANT_VECTOR_SIZE:-1536}
      
      # JWT и безопасность
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - SECRET_KEY=${SECRET_KEY}
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      
      # Файлы
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-52428800}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES:-pdf,docx,txt,xlsx,xls,ppt,pptx,md,csv,rtf}
      
      # Логирование
      - LOG_FILE=${LOG_FILE:-logs/app.log}
      - LOG_FORMAT=${LOG_FORMAT:-%(asctime)s - %(name)s - %(levelname)s - %(message)s}
      
      # Сервер
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=${WORKERS:-4}
      - RELOAD=${RELOAD:-false}
      
      # Rate limiting
      - RATE_LIMIT_REQUESTS_PER_SECOND=${RATE_LIMIT_REQUESTS_PER_SECOND:-10}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
      - RATE_LIMIT_UPLOADS_PER_MINUTE=${RATE_LIMIT_UPLOADS_PER_MINUTE:-5}
    depends_on:
      qdrant:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./sessions:/app/sessions
      - ./vector_cache:/app/vector_cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30}s
      timeout: ${HEALTH_CHECK_TIMEOUT:-10}s
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - rag_network

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "${QDRANT_EXTERNAL_PORT:-6333}:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30}s
      timeout: ${HEALTH_CHECK_TIMEOUT:-10}s
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 10s
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - rag_network

  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag_network

volumes:
  qdrant_storage:

networks:
  rag_network:
    driver: bridge
