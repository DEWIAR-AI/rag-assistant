#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
"""

from fastapi import APIRouter, HTTPException, Depends, Query, Request
from fastapi.responses import HTMLResponse, JSONResponse
from typing import Optional
import logging
import urllib.parse

from services.pdf_viewer_service import pdf_viewer_service
from services.excel_viewer_service import excel_viewer_service
from services.word_viewer_service import word_viewer_service
from services.powerpoint_viewer_service import powerpoint_viewer_service
from services.auth_dependencies import get_current_token
from schemas import TokenValidation

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/viewer", tags=["document-viewer"])


@router.get("/pdf/{document_id}", response_class=HTMLResponse)
async def view_pdf_document(
    document_id: int,
    page: Optional[int] = Query(None, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞"),
    token: Optional[TokenValidation] = Depends(get_current_token)
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = await pdf_viewer_service.get_pdf_preview_data(document_id, page)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        html_content = pdf_viewer_service.create_pdf_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ PDF {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/pdf/{document_id}", response_class=HTMLResponse)
async def view_pdf_document_public(
    document_id: int,
    page: Optional[int] = Query(None, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞")
):
    """–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = await pdf_viewer_service.get_pdf_preview_data(document_id, page)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        html_content = pdf_viewer_service.create_pdf_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏—á–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ PDF {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/pdf/{document_id}/data")
async def get_pdf_data_public(document_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ PDF –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ–±—Ö–æ–¥ CORS)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = await pdf_viewer_service.get_pdf_preview_data(document_id)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        return document_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PDF –¥–∞–Ω–Ω—ã—Ö {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/pdf/{document_id}/file")
async def get_pdf_file_public(document_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        from database.database import SessionLocal
        from database.models import Document
        from fastapi.responses import FileResponse
        import os
        
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            if not document:
                raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if not document.is_processed:
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
            if not document.mime_type.startswith('application/pdf'):
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
            from services.supabase_service import supabase_service
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {document.file_path or document.filename}")
                file_data = supabase_service.download_file(document.file_path or document.filename)
                
                if not file_data:
                    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                
                logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ response
                from fastapi.responses import Response
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º filename –¥–ª—è HTTP headers
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º RFC 5987 —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UTF-8 –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
                    safe_filename = urllib.parse.quote(document.original_filename)
                    logger.info(f"–°–æ–∑–¥–∞–µ–º Response —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º filename: {safe_filename}")
                    
                    return Response(
                        content=file_data,
                        media_type="application/pdf",
                        headers={
                            "Content-Disposition": f"inline; filename*=UTF-8''{safe_filename}",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                    
                except Exception as header_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ filename
                    return Response(
                        content=file_data,
                        media_type="application/pdf",
                        headers={
                            "Content-Disposition": "inline",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Supabase: {e}")
                logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Supabase
                try:
                    # –ü–æ–ª—É—á–∞–µ–º bucket name –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                    from config import settings
                    bucket_name = getattr(settings, 'supabase_bucket', 'rag-files')
                    file_path = document.file_path or document.filename
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                    direct_url = f"https://mrvhrfsmhdvhwbwgsrra.supabase.co/storage/v1/object/public/{bucket_name}/{file_path}"
                    
                    logger.info(f"–°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É: {direct_url}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º redirect –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                    from fastapi.responses import RedirectResponse
                    return RedirectResponse(url=direct_url)
                    
                except Exception as redirect_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: {redirect_error}")
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                
        finally:
            db.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞ {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/excel/{document_id}/file")
async def get_excel_file_public(document_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"üîç –í–´–ó–í–ê–ù ENDPOINT –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞ {document_id}")
    
    try:
        from database.database import SessionLocal
        from database.models import Document
        from fastapi.responses import Response
        import urllib.parse
        import logging
        
        logger = logging.getLogger(__name__)
        
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            if not document:
                logger.error(f"–î–æ–∫—É–º–µ–Ω—Ç {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if not document.is_processed:
                logger.error(f"–î–æ–∫—É–º–µ–Ω—Ç {document_id} –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
            logger.info(f"=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê {document_id} ===")
            logger.info(f"MIME —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.mime_type}")
            logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞: {document.file_type}")
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {document.file_size} –±–∞–π—Ç")
            logger.info(f"–ü—É—Ç—å —Ñ–∞–π–ª–∞: {document.file_path}")
            logger.info(f"–ò–º—è —Ñ–∞–π–ª–∞: {document.filename}")
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {document.original_filename}")
            logger.info(f"==========================================")
            
            if not document.mime_type.startswith('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') and not document.mime_type.startswith('application/vnd.ms-excel'):
                logger.error(f"–î–æ–∫—É–º–µ–Ω—Ç {document_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel —Ñ–∞–π–ª–æ–º. MIME —Ç–∏–ø: {document.mime_type}")
                raise HTTPException(status_code=400, detail=f"–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel —Ñ–∞–π–ª–æ–º. MIME —Ç–∏–ø: {document.mime_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
            from services.supabase_service import supabase_service
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª: {document.file_path or document.filename}")
                file_data = supabase_service.download_file(document.file_path or document.filename)
                
                if not file_data:
                    logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Supabase")
                    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                
                logger.info(f"Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                mime_type = document.mime_type or "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º filename –¥–ª—è HTTP headers
                try:
                    safe_filename = urllib.parse.quote(document.original_filename)
                    logger.info(f"–°–æ–∑–¥–∞–µ–º Response —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º filename: {safe_filename}")
                    
                    return Response(
                        content=file_data,
                        media_type=mime_type,
                        headers={
                            "Content-Disposition": f"attachment; filename*=UTF-8''{safe_filename}",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                    
                except Exception as header_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                    return Response(
                        content=file_data,
                        media_type=mime_type,
                        headers={
                            "Content-Disposition": "attachment",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ –∏–∑ Supabase: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                
        finally:
            db.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        from database.database import SessionLocal
        from database.models import Document
        from fastapi.responses import Response
        import urllib.parse
        import logging
        
        logger = logging.getLogger(__name__)
        
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            if not document:
                raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if not document.is_processed:
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
            logger.info(f"MIME —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document.mime_type}")
            logger.info(f"–¢–∏–ø —Ñ–∞–π–ª–∞: {document.file_type}")
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {document.file_size} –±–∞–π—Ç")
            logger.info(f"–ü—É—Ç—å —Ñ–∞–π–ª–∞: {document.file_path}")
            logger.info(f"–ò–º—è —Ñ–∞–π–ª–∞: {document.filename}")
            
            if not document.mime_type.startswith('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') and not document.mime_type.startswith('application/vnd.ms-excel'):
                logger.error(f"–î–æ–∫—É–º–µ–Ω—Ç {document_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel —Ñ–∞–π–ª–æ–º. MIME —Ç–∏–ø: {document.mime_type}")
                raise HTTPException(status_code=400, detail=f"–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel —Ñ–∞–π–ª–æ–º. MIME —Ç–∏–ø: {document.mime_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
            from services.supabase_service import supabase_service
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª: {document.file_path or document.filename}")
                file_data = supabase_service.download_file(document.file_path or document.filename)
                
                if not file_data:
                    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                
                logger.info(f"Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                mime_type = document.mime_type or "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º filename –¥–ª—è HTTP headers
                try:
                    safe_filename = urllib.parse.quote(document.original_filename)
                    logger.info(f"–°–æ–∑–¥–∞–µ–º Response —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º filename: {safe_filename}")
                    
                    return Response(
                        content=file_data,
                        media_type=mime_type,
                        headers={
                            "Content-Disposition": f"attachment; filename*=UTF-8''{safe_filename}",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                    
                except Exception as header_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                    return Response(
                        content=file_data,
                        media_type=mime_type,
                        headers={
                            "Content-Disposition": "attachment",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ –∏–∑ Supabase: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                
        finally:
            db.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        from fastapi.responses import Response
        import os
        
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            if not document:
                raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if not document.is_processed:
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel
            if not (document.mime_type.startswith('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') or 
                   document.mime_type.startswith('application/vnd.ms-excel')):
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel —Ñ–∞–π–ª–æ–º")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
            from services.supabase_service import supabase_service
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª: {document.file_path or document.filename}")
                file_data = supabase_service.download_file(document.file_path or document.filename)
                
                if not file_data:
                    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                
                logger.info(f"Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ response
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º RFC 5987 —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UTF-8 –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
                    safe_filename = urllib.parse.quote(document.original_filename)
                    logger.info(f"–°–æ–∑–¥–∞–µ–º Response —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º filename: {safe_filename}")
                    
                    return Response(
                        content=file_data,
                        media_type=document.mime_type,
                        headers={
                            "Content-Disposition": f"attachment; filename*=UTF-8''{safe_filename}",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                    
                except Exception as header_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ filename
                    return Response(
                        content=file_data,
                        media_type=document.mime_type,
                        headers={
                            "Content-Disposition": "attachment",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ –∏–∑ Supabase: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                
        finally:
            db.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/word/{document_id}/file")
async def get_word_file_public(document_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Word —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        from database.database import SessionLocal
        from database.models import Document
        from fastapi.responses import Response
        import urllib.parse
        import logging
        
        logger = logging.getLogger(__name__)
        
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            if not document:
                raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if not document.is_processed:
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Word —Ñ–∞–π–ª
            if not document.mime_type.startswith('application/vnd.openxmlformats-officedocument.wordprocessingml.document') and not document.mime_type.startswith('application/msword'):
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Word —Ñ–∞–π–ª–æ–º")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
            from services.supabase_service import supabase_service
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å Word —Ñ–∞–π–ª: {document.file_path or document.filename}")
                file_data = supabase_service.download_file(document.file_path or document.filename)
                
                if not file_data:
                    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                
                logger.info(f"Word —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                mime_type = document.mime_type or "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º filename –¥–ª—è HTTP headers
                try:
                    safe_filename = urllib.parse.quote(document.original_filename)
                    logger.info(f"–°–æ–∑–¥–∞–µ–º Response —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º filename: {safe_filename}")
                    
                    return Response(
                        content=file_data,
                        media_type=mime_type,
                        headers={
                            "Content-Disposition": f"attachment; filename*=UTF-8''{safe_filename}",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                    
                except Exception as header_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                    return Response(
                        content=file_data,
                        media_type=mime_type,
                        headers={
                            "Content-Disposition": "attachment",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Word —Ñ–∞–π–ª–∞ –∏–∑ Supabase: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                
        finally:
            db.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Word —Ñ–∞–π–ª–∞ {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        from fastapi.responses import Response
        import os
        
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            if not document:
                raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if not document.is_processed:
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Word
            if not (document.mime_type.startswith('application/vnd.openxmlformats-officedocument.wordprocessingml.document') or 
                   document.mime_type.startswith('application/msword')):
                raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Word —Ñ–∞–π–ª–æ–º")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
            from services.supabase_service import supabase_service
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å Word —Ñ–∞–π–ª: {document.file_path or document.filename}")
                file_data = supabase_service.download_file(document.file_path or document.filename)
                
                if not file_data:
                    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                
                logger.info(f"Word —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ response
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º RFC 5987 —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UTF-8 –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
                    safe_filename = urllib.parse.quote(document.original_filename)
                    logger.info(f"–°–æ–∑–¥–∞–µ–º Response —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º filename: {safe_filename}")
                    
                    return Response(
                        content=file_data,
                        media_type=document.mime_type,
                        headers={
                            "Content-Disposition": f"attachment; filename*=UTF-8''{safe_filename}",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                    
                except Exception as header_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_error}")
                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ filename
                    return Response(
                        content=file_data,
                        media_type=document.mime_type,
                        headers={
                            "Content-Disposition": "attachment",
                            "Cache-Control": "public, max-age=3600",
                            "Access-Control-Allow-Origin": "*",
                            "Access-Control-Allow-Methods": "GET, OPTIONS",
                            "Access-Control-Allow-Headers": "*"
                        }
                    )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Word —Ñ–∞–π–ª–∞ –∏–∑ Supabase: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                
        finally:
            db.close()
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Word —Ñ–∞–π–ª–∞ {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/pdf/{document_id}/metadata")
async def get_pdf_metadata(
    document_id: int,
    token: TokenValidation = Depends(get_current_token)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        metadata = pdf_viewer_service.get_pdf_metadata(document_id)
        
        if 'error' in metadata:
            raise HTTPException(status_code=404, detail=metadata['error'])
        
        return metadata
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö PDF {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/pdf/{document_id}/page/{page_number}")
async def go_to_pdf_page(
    document_id: int,
    page_number: int,
    token: TokenValidation = Depends(get_current_token)
):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        document_data = await pdf_viewer_service.get_pdf_preview_data(document_id, page_number)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        html_content = pdf_viewer_service.create_pdf_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number} PDF {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/excel/{document_id}")
async def view_excel_document(
    document_id: int,
    sheet: Optional[str] = Query(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞"),
    token: Optional[TokenValidation] = Depends(get_current_token)
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Google Sheets"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = excel_viewer_service.get_excel_preview_data(document_id)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        html_content = excel_viewer_service.create_excel_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ Excel {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/excel/{document_id}", response_class=HTMLResponse)
async def view_excel_document_public(
    document_id: int,
    sheet: Optional[str] = Query(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞")
):
    """–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = excel_viewer_service.get_excel_preview_data(document_id)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        html_content = excel_viewer_service.create_excel_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏—á–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ Excel {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/word/{document_id}", response_class=HTMLResponse)
async def view_word_document(
    document_id: int,
    token: Optional[TokenValidation] = Depends(get_current_token)
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä Word –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º docx-preview"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = word_viewer_service.get_word_preview_data(document_id)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        html_content = word_viewer_service.create_word_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ Word {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/word/{document_id}", response_class=HTMLResponse)
async def view_word_document_public(
    document_id: int
):
    """–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä Word –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = word_viewer_service.get_word_preview_data(document_id)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        html_content = word_viewer_service.create_word_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏—á–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ Word {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/powerpoint/{document_id}")
async def view_powerpoint_document(
    document_id: int,
    slide: Optional[int] = Query(None, description="–ù–æ–º–µ—Ä —Å–ª–∞–π–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞"),
    token: Optional[TokenValidation] = Depends(get_current_token)
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä PowerPoint –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Office Online"""
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä PowerPoint —á–µ—Ä–µ–∑ Office Online
        return {
            "message": "–ü—Ä–æ—Å–º–æ—Ç—Ä PowerPoint –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
            "document_id": document_id,
            "slide": slide,
            "suggestion": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ PowerPoint"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ PowerPoint {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/public/powerpoint/{document_id}")
async def view_powerpoint_document_public(
    document_id: int,
    slide: Optional[int] = Query(None, description="–ù–æ–º–µ—Ä —Å–ª–∞–π–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞")
):
    """–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä PowerPoint –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document_data = powerpoint_viewer_service.get_powerpoint_preview_data(document_id, slide)
        
        if document_data.get('error'):
            raise HTTPException(status_code=404, detail=document_data.get('error', '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞
        html_content = powerpoint_viewer_service.create_powerpoint_viewer_html(document_data)
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏—á–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ PowerPoint {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/{document_type}/{document_id}")
async def view_document_generic(
    document_type: str,
    document_id: int,
    token: TokenValidation = Depends(get_current_token)
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if document_type == "pdf":
            return await view_pdf_document(document_id, None, token)
        elif document_type in ["excel", "xlsx", "xls"]:
            return await view_excel_document(document_id, None, token)
        elif document_type in ["word", "docx", "doc"]:
            return await view_word_document(document_id, token)
        elif document_type in ["powerpoint", "pptx", "ppt"]:
            return await view_powerpoint_document(document_id, None, token)
        else:
            raise HTTPException(
                status_code=400, 
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/health")
async def viewer_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    return {
        "status": "healthy",
        "service": "document-viewer",
        "supported_formats": {
            "pdf": "–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π",
            "excel": "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è (Google Sheets API)",
            "word": "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è (Office Online)",
            "powerpoint": "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è (Office Online)"
        },
        "features": [
            "PDF –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º",
            "–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
            "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            "–ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        ]
    }
